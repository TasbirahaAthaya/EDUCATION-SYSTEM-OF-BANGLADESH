
CREATE TABLE DIVISION
(
 POSTAL_CODE VARCHAR2(50) PRIMARY KEY,
 DIV_NAME VARCHAR2(100)
);

create table INSTITUTION
(
 INS_ID VARCHAR2(50) PRIMARY KEY,
 INS_NAME VARCHAR2(100),
 INS_CITY VARCHAR2(100),
 INS_STREET VARCHAR2(100),
 INS_SEAT NUMBER(20,2),
 INS_CONTACT VARCHAR2(50),
 INS_PRI_PUB VARCHAR2(100),
 POSTAL_CODE VARCHAR2(50),
 CONSTRAINT INSTITUTE_POSTAL_CODE_FK FOREIGN KEY(POSTAL_CODE) REFERENCES DIVISION(POSTAL_CODE)
);

CREATE TABLE UNIVERSITY
(
 UNI_TYPE VARCHAR2(100),
 OFFERED_DEGREE VARCHAR2(100),
 RANKING_UGC VARCHAR2(100),
 PREREQUISITE_SSC_GPA VARCHAR2(50),
 PREREQUISITE_HSC_GPA VARCHAR2(50),
 PREREQUISITE_DEPT VARCHAR2(100),
 ADDMISSION_APP_DEADLINE DATE,
 ADDMISSION_TEST_DEADLINE DATE,
 INS_ID VARCHAR2(50),
 CONSTRAINT UNIVERSITY_INS_ID_FK FOREIGN KEY(INS_ID) REFERENCES INSTITUTION(INS_ID)
);
CREATE TABLE HAS
(
 INS_ID VARCHAR2(50),
 DEPT_ID VARCHAR2(50)
);
CREATE TABLE SCHOOL
(
 SCHOOL_TYPE VARCHAR2(200),
 INS_ID VARCHAR2(50), 
 CONSTRAINT SCHOOL_INS_ID_FK FOREIGN KEY(INS_ID) REFERENCES INSTITUTION(INS_ID)
);
CREATE TABLE SECONDARY
(
 JSC_RESULT VARCHAR2(50),
 SSC_RESULT VARCHAR2(50),
 INS_ID VARCHAR2(50), 
 CONSTRAINT SECONDARY_INS_ID_FK FOREIGN KEY(INS_ID) REFERENCES INSTITUTION(INS_ID)
);


CREATE TABLE COLLEGE
(
 BOARD_RESULT NUMBER(20,2),
 MIN_RESULT_SSC VARCHAR2(200),
 MIN_RESULT_HSC VARCHAR2(200),
 COLLEGE_CATEGORY VARCHAR2(200),
 COLLEGE_OPTIONAL_SUB1 VARCHAR2(100),
 COLLEGE_OPTIONAL_SUB2 VARCHAR2(100),
 COLLEGE_OPTIONAL_SUB3 VARCHAR2(100),
 
 COLG_YEAR VARCHAR2(50),
 INS_ID VARCHAR2(50),
 CONSTRAINT COLLEGE_INS_ID_FK FOREIGN KEY(INS_ID) REFERENCES INSTITUTION(INS_ID)
);

CREATE TABLE HAS
(
 INS_ID VARCHAR2(50),
 DEPT_ID VARCHAR2(50)
);
CREATE TABLE DEPARTMENT
(
 DEPT_ID VARCHAR2(50),
 DEPT_NAME VARCHAR2(50),
 NO_STAFF NUMBER(20,2),
 NO_TEACHER NUMBER(20,2) 
);
CREATE TABLE OFFERS
(
 CRS_ID VARCHAR2(50),
 DEPT_ID VARCHAR2(50)
);
CREATE TABLE COURSE
(
 CRS_ID VARCHAR2(50),
 CRS_NAME VARCHAR2(100),
 CREDIT NUMBER(20,2),
 TOTAL_HOUR NUMBER(20,2)
);
CREATE TABLE TEACHES
(
 EMP_USER_NAME VARCHAR2(100),
 CRS_NAME VARCHAR2(100)
);
CREATE TABLE EMPLOYEE
(
 EMP_ID NUMBER(20) PRIMARY KEY,
 EMP_NAME VARCHAR2(100),
 EMP_RANK VARCHAR2(100),
 EMP_USER_NAME VARCHAR2(100),
 EMP_PASSWORD VARCHAR2(100),
 EMP_GENDER VARCHAR2(100),
 EMP_CONTACT VARCHAR2(100),
 EMP_EMAIL VARCHAR2(100),
 EMP_CATEGORY VARCHAR2(100),
 EMP_SALARY NUMBER(30,2),
 EMP_GRAD VARCHAR2(100),
 EMP_POST_GRAD VARCHAR2(100),
 EMP_CITY VARCHAR2(100),
 EMP_STREET VARCHAR2(100),
 INS_NAME VARCHAR2(100)
);
CREATE TABLE EMPLOY 
(
 EMP_ID NUMBER(20),
 DEPT_ID VARCHAR2(50)
);
CREATE TABLE EMPLOYEE_HISTORY
(
 EMP_ID NUMBER(20) PRIMARY KEY,
 EMP_NAME VARCHAR2(100),
 EMP_RANK VARCHAR2(100),
 EMP_USER_NAME VARCHAR2(100),
 EMP_PASSWORD VARCHAR2(100),
 EMP_GENDER VARCHAR2(100),
 EMP_CONTACT VARCHAR2(100),
 EMP_EMAIL VARCHAR2(100),
 EMP_CATEGORY VARCHAR2(100),
 EMP_SALARY NUMBER(30,2),
 EMP_GRAD VARCHAR2(100),
 EMP_POST_GRAD VARCHAR2(100),
 EMP_CITY VARCHAR2(100),
 EMP_STREET VARCHAR2(100),
 INS_NAME VARCHAR2(100)
);

CREATE or REPLACE TRIGGER EMPLOYEE_HIS_TRIGGER 
BEFORE UPDATE OF EMP_SALARY 
ON EMPLOYEE 
FOR EACH ROW 
BEGIN 
	INSERT INTO EMPLOYEE_HISTORY VALUES (:old.EMP_ID, :old.EMP_NAME, :old.EMP_RANK, :old.EMP_USER_NAME, :old.EMP_PASSWORD,
  :old.EMP_GENDER,:old.EMP_CONTACT,:old.EMP_EMAIL,:old.EMP_CATEGORY,:old.EMP_SALARY,:old.EMP_GRAD,:old.EMP_POST_GRAD,:old.EMP_CITY,:old.EMP_STREET,:old.INS_ID); 
END; 

CREATE SEQUENCE emp_sequence
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER EMP_TRIGGER
BEFORE INSERT ON EMPLOYEE 
FOR EACH ROW
WHEN (new.emp_id IS NULL)
BEGIN
  SELECT emp_sequence.NEXTVAL
  INTO   :new.emp_id
  FROM   dual;
END;

CREATE TABLE FACULTY
(
 FAC_NO_COURSES NUMBER(30,2),
 EMP_ID VARCHAR2(100),
 CONSTRAINT FACULTY_EMP_ID_FK FOREIGN KEY(EMP_ID) REFERENCES EMPLOYEE(EMP_ID)
);
CREATE TABLE STAFF
(
 WORKING_SECTOR VARCHAR2(100),
 CONSTRAINT STAFF_EMP_ID_FK FOREIGN KEY(EMP_ID) REFERENCES EMPLOYEE(EMP_ID)
);
CREATE TABLE STUDENT
(
 STU_NAME VARCHAR2(100),
 STU_DEPT VARCHAR2(100),
 STU_GPA_SSC VARCHAR2(100),
 STU_GPA_HSC VARCHAR2(100),
 STU_CITY VARCHAR2(100),
 STU_CHOICE VARCHAR2(100)
);

SELECT INS_NAME FROM INSTITUTION NATURAL JOIN UNIVERSITY 
WHERE PREREQUISITE_DEPT='$dept' and PREREQUISITE_HSC_GPA='$hsc_gpa'


SELECT INS_NAME FROM INSTITUTION NATURAL JOIN UNIVERSITY NATURAL JOIN HAS NATURAL JOIN DEPARTMENT WHERE DEPT_NAME='CSE';

SELECT CRS_NAME,CREDIT,TOTAL_HOUR FROM INSTITUTION NATURAL JOIN UNIVERSITY NATURAL JOIN HAS NATURAL JOIN DEPARTMENT NATURAL JOIN OFFERS NATURAL JOIN
COURSE WHERE DEPT_NAME='CSE' AND INS_NAME='MIST' ORDER BY DEPT_NAME;

SCHOLL:
1.SELECT INS_NAME FROM INSTITUTE,SCHOOL
WHERE INSTITUTE.INS_ID=SCHOOL.INS_ID

SELECT INS_NAME FROM INSTITUTE,SECONDARY
WHERE INSTITUTE.INS_ID=SECONDARY.INS_ID;

2. SELECT INS_CITY,INS_STREET,INS_SEAT,INS_CONTACT,INS_PRI_PUB,EMP_NAME,EMP_RANK,EMP_CONTACT,EMP_CITY,EMP_STREET,FAC_NO_COURSES
FROM INSTITUTE NATURAL JOIN EMPLOYEE NATURAL JOIN FACULTY
WHERE INS_NAME=' ';

UNIVERSITY :
SELECT INS_NAME,INS_CITY,INS_STREET,INS_SEAT,INS_CONTACT,INS_PRI_PUB,UNI_TYPE,
 OFFERED_DEGREE,
 RANKING_UGC,
 PREREQUISITE_SSC_GPA,
 PREREQUISITE_HSC_GPA,
 PREREQUISITE_DEPT,
 ADDMISSION_APP_DEADLINE,
 ADDMISSION_TEST_DEADLINE,
  DEPT_NAME,
 NO_STAFF,
 NO_TEACHER
FROM INSTITUTE NATURAL JOIN UNIVERSITY NATURAL JOIN HAS NATURAL JOIN DEPARTMENT
WHERE INS_NAME=' ';



